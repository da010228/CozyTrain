'use client'

import { Canvas } from "@react-three/fiber";
import { Suspense, useRef, useEffect, useState } from "react";
import { OrbitControls, Clone } from "@react-three/drei";
import { useGLTF } from "@react-three/drei";

import styles from "./page.module.css"
import MapCloseButton from "../component/MapCloseButton";
import MapAllButton from "../component/MapAllButton";
import GlobeButton from "../component/GlobeButton";
import TrainButton from "../component/TrainButton";
import Modal from "@/components/Modal";
import ExplainModal from "../component/ExplainModal"

import getFetch from "@/services/getFetch"
import positionData from "public/json/position.json"

export default function Korea() {

    const [curPosition, setCurPosition] = useState([]);
    const [curRotation, setCurRotation] = useState([]);
    const [curCountry, setCurCountry] = useState("");
    const [curRegion, setCurRegion] = useState(""); 

    // Î™®Îç∏ ÌÅ¥Î¶≠ Ïó¨Î∂Ä ÏÉÅÌÉú 
    const [showModal, setShowModal] = useState(false);
    const [modalTitle, setModalTitle] = useState("");
    const [modalText, setModalText] = useState("");

    const [loading, setLoading] = useState(true);

    const getTrainLocation = async () => {
        const data = await getFetch("train/cur-location-info")
        const curRegionNum = data.response.regionNum;
        const curArea = data.response.area;
        setCurCountry(data.response.countryKor);
        setCurRegion(data.response.regionKor);

        const foundPositionData = findPosition(curRegionNum, curArea);
        if (foundPositionData) {
            setCurPosition(foundPositionData.position);
            setCurRotation(foundPositionData.rotation);
        }
    }

    const findPosition = (regionNum, area) => {
        return positionData.find((data) =>
            data.regionNum === regionNum && data.area === area
        );
    }

    const group = useRef();

    useEffect(() => {
        if (group.current) {
            controls.current.target.copy(group.current.position);
        }

        getTrainLocation();
    }, []);

    const Models = [
        { name: "ground", url: "/models/japan-ground1.glb", position: [0, 0, 0], rotation: [0, 0, 0] },
        { name: "train", url: "/models/red-train.glb", position: curPosition, rotation: curRotation },
        { name: "flag", url: "/models/japan-flag.glb", position: [0, 0.1, 0], rotation: [0, 0, 0]},
        { name: "sapporo", url: "/models/sapporo.glb", position: [-0.098,-0.001,-0.03], rotation: [0,3.1,0]},
        { name: "tokyo", url: "/models/sapporo.glb", position: [-0.098,-0.001,-0.03], rotation: [0,3.1,0]}

    ]

    const Model = ({ url, scale, position, rotation, title, text }) => {
        const { scene } = useGLTF(url);
        scene.scale.set(scale, scale, scale);
        scene.position.set(position[0], position[1], position[2])
        scene.rotation.set(rotation[0], rotation[1], rotation[2])

        const handleClick = () => {
            if(url !== Models[0].url) {
                setShowModal(true);
                setModalTitle(title);
                setModalText(text);
            }
        }
        return <Clone object={scene} onClick={handleClick}/>;
    }

    return (
        <div className={styles.container}>
            <GlobeButton />
            <MapCloseButton />
            <div className={styles.mapAllButton}>
                <MapAllButton>ÏùºÎ≥∏</MapAllButton>
            </div>
            <Canvas camera={{ position: [0, 0.03, -0.2], near: 0.038 }}>
                <Suspense fallback={null}>
                    {curCountry === 'ÏùºÎ≥∏' && (
                        <group ref={group}>
                            <Model
                                url={Models[1].url}
                                scale={0.0003}
                                position={[Models[1].position[0], Models[1].position[1], Models[1].position[2]]}
                                rotation={[Models[1].rotation[0], Models[1].rotation[1], Models[1].rotation[2]]}
                                title="ÏπôÏπô Ìè¨Í∑ºÌè¨Í∑º üöÇ"
                                text={`ÏπôÏπô ... üí§
                                Ìè¨Í∑ºÌè¨Í∑º ... üí§
                                
                                Ïó¥Ï∞®Îäî ÏßÄÍ∏à ${curCountry} ${curRegion}ÏóêÏÑú Îã¨Î¶¨Í≥† ÏûàÏäµÎãàÎã§!
                                (ÔΩ°ÔΩ•‚àÄÔΩ•)ÔæâÔæû
                                `} />
                        </group>
                    )
                    }
                    <Model
                        url={Models[2].url}
                        scale={0.02}
                        position={[Models[2].position[0], Models[2].position[1], Models[2].position[2]]}
                        rotation={[Models[2].rotation[0], Models[2].rotation[1], Models[2].rotation[2]]}
                        title="üç£ÏùºÎ≥∏üç°"
                        text={`ÏùºÎ≥∏ÏùÄ ÏïÑÏãúÏïÑÏùò ÏÑ¨ÎÇòÎùºÎ°ú, 
                        ÎèÖÌäπÌïòÍ≥† Îã§ÏñëÌïú Î¨∏ÌôîÎ•º ÏûêÎûëÌï©ÎãàÎã§. 
                        
                        ÏùºÎ≥∏ÏùÄ ÏÑ∏Í≥ÑÏ†ÅÏù∏ Í≤ΩÏ†ú Í∞ïÍµ≠ÏúºÎ°úÏÑú, 
                        Ï≤®Îã® Í∏∞Ïà†, ÏûêÎèôÏ∞® ÏÇ∞ÏóÖ, Í∑∏Î¶¨Í≥† ÎßåÌôîÏôÄ Ïï†ÎãàÎ©îÏù¥ÏÖò Î∂ÑÏïºÏóêÏÑú 
                        Í∏ÄÎ°úÎ≤å ÏòÅÌñ•Î†•ÏùÑ ÏßÄÏÜçÏ†ÅÏúºÎ°ú ÌôïÏû•ÌïòÍ≥† ÏûàÏäµÎãàÎã§. 

                        ÎòêÌïú, ÏùºÎ≥∏ÏùÄ Îß§Î†•Ï†ÅÏù∏ ÏùåÏãù Î¨∏ÌôîÎ°ú Ïú†Î™ÖÌïòÎ©∞, 
                        Ìöå, ÎùºÎ©ò, Ï¥àÎ∞• Îì±Ïù¥ ÏÑ∏Í≥ÑÏ†ÅÏúºÎ°ú ÏÇ¨ÎûëÎ∞õÍ≥† ÏûàÏäµÎãàÎã§.`}
                    />
                    <Model
                        url={Models[3].url}
                        scale={0.004}
                        position={[Models[3].position[0], Models[3].position[1], Models[3].position[2]]}
                        rotation={[Models[3].rotation[0], Models[3].rotation[1], Models[3].rotation[2]]}
                        title="üç£ÏÇøÌè¨Î°úüç° - Îàà"
                        text={`ÏÇøÌè¨Î°úÎäî ÏùºÎ≥∏Ïùò ÌôãÏπ¥Ïù¥ÎèÑ ÏßÄÎ∞©Ïóê ÏúÑÏπòÌïú ÎèÑÏãúÎ°ú, 
                        ÏûêÏó∞Ïùò ÏïÑÎ¶ÑÎã§ÏõÄÍ≥º ÎèÑÏãúÏùò ÌòÑÎåÄÏÑ±Ïù¥ Ï°∞ÌôîÎ°≠Í≤å Ïñ¥Ïö∞Îü¨Ï†∏ ÏûàÏäµÎãàÎã§. 
                        
                        Ï£ºÎ≥ÄÏóêÎäî Ìë∏Î•∏ Î∞îÎã§ÏôÄ ÎÜíÏùÄ ÏÇ∞Î¥âÏö∞Î¶¨Í∞Ä 
                        Ïù∏ÏÉÅÏ†ÅÏúºÎ°ú ÌéºÏ≥êÏ†∏ ÏûàÏñ¥ ÏûêÏó∞ Í∞êÍ∞ÅÏùÑ ÎäêÎÇÑ Ïàò ÏûàÏäµÎãàÎã§. 
                        
                        ÌäπÌûà Í≤®Ïö∏ÏóêÎäî ÎààÏúºÎ°ú ÎçÆÏù∏ ÌíçÍ≤ΩÏù¥ ÏïÑÎ¶ÑÎã§ÏõÄÏùÑ ÎçîÌï¥Ï£ºÎ©∞, 
                        ÏÇøÌè¨Î°ú ÎààÏ∂ïÏ†úÎäî ÏÑ∏Í≥ÑÏ†ÅÏúºÎ°ú Ïú†Î™ÖÌïú Ï∂ïÏ†ú Ï§ë ÌïòÎÇòÎ°ú ÏÜêÍºΩÌûôÎãàÎã§.`}
                    />
                    <Model
                        url={Models[3].url}
                        scale={0.004}
                        position={[Models[3].position[0], Models[3].position[1], Models[3].position[2]]}
                        rotation={[Models[3].rotation[0], Models[3].rotation[1], Models[3].rotation[2]]}
                        title="üç£ÏÇøÌè¨Î°úüç° - Îàà"
                        text={`ÏÇøÌè¨Î°úÎäî ÏùºÎ≥∏Ïùò ÌôãÏπ¥Ïù¥ÎèÑ ÏßÄÎ∞©Ïóê ÏúÑÏπòÌïú ÎèÑÏãúÎ°ú, 
                        ÏûêÏó∞Ïùò ÏïÑÎ¶ÑÎã§ÏõÄÍ≥º ÎèÑÏãúÏùò ÌòÑÎåÄÏÑ±Ïù¥ Ï°∞ÌôîÎ°≠Í≤å Ïñ¥Ïö∞Îü¨Ï†∏ ÏûàÏäµÎãàÎã§. 
                        
                        Ï£ºÎ≥ÄÏóêÎäî Ìë∏Î•∏ Î∞îÎã§ÏôÄ ÎÜíÏùÄ ÏÇ∞Î¥âÏö∞Î¶¨Í∞Ä 
                        Ïù∏ÏÉÅÏ†ÅÏúºÎ°ú ÌéºÏ≥êÏ†∏ ÏûàÏñ¥ ÏûêÏó∞ Í∞êÍ∞ÅÏùÑ ÎäêÎÇÑ Ïàò ÏûàÏäµÎãàÎã§. 
                        
                        ÌäπÌûà Í≤®Ïö∏ÏóêÎäî ÎààÏúºÎ°ú ÎçÆÏù∏ ÌíçÍ≤ΩÏù¥ ÏïÑÎ¶ÑÎã§ÏõÄÏùÑ ÎçîÌï¥Ï£ºÎ©∞, 
                        ÏÇøÌè¨Î°ú ÎààÏ∂ïÏ†úÎäî ÏÑ∏Í≥ÑÏ†ÅÏúºÎ°ú Ïú†Î™ÖÌïú Ï∂ïÏ†ú Ï§ë ÌïòÎÇòÎ°ú ÏÜêÍºΩÌûôÎãàÎã§.`}
                    />
                    <Model
                        url={Models[0].url}
                        scale={0.175}
                        position={[Models[0].position[0], Models[0].position[1], Models[0].position[2]]}
                        rotation={[Models[0].rotation[0], Models[0].rotation[1], Models[0].rotation[2]]}
                    />
                    <ambientLight intensity={3} />
                </Suspense>
                <OrbitControls
                    enableRotate={true}
                    enableZoom={false}
                    maxPolarAngle={Math.PI / 2.21}
                // target={group.current?.position || [0, 0, 0]}
                />
            </Canvas>
            {showModal && (
                <>
                <Modal onClick={() => setShowModal(false)}>
                    <div>
                        <div className={styles.modalTitle}>
                            {modalTitle}
                        </div>
                        <div className={styles.modalText}>
                            {modalText}
                        </div>
                    </div>
                </Modal>
                </>
            )}
        </div >
    )
}